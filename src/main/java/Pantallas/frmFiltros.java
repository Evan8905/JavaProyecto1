
package Pantallas;

import Clases.Album;
import Clases.Artista;
import Clases.Cancion;
import Clases.Genero;
import Logica.Utilitario;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


public class frmFiltros extends javax.swing.JFrame {
 
    // Agregar ComboBox para cada columna
  
    
    public frmFiltros(frmPrincipal aThis, boolean par) {
        initComponents();
        //Linea para que no se salga
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        
        
        
        
//////////////////////////////////////////////////////Tabla///////////////////////////////////

        //*(Agregar las columnas al modelo de tabla
       
        // Recorrer la lista de artistas y agregar cada artista a una fila en el modelo de tabla
        
        
        DefaultTableModel modeloTabla = new DefaultTableModel(new Object[]{"Numero","Cancion","Duracion","Artista", "Álbum", "Genero"}, 0);
        jTableBusqueda.setModel(modeloTabla);

        int maxSize = Math.max(Utilitario.listaAlbum.size(), Utilitario.listaArtistas.size());
        
        
        
        
        
       for (int i = 0; i < maxSize; i++) {
        // Crea un array de objetos para representar una fila en la tabla
        Object[] fila = new Object[6];

        // Agrega el nombre del artista si hay más artistas disponibles
        if (i < Utilitario.listaCanciones.size()) {
            Cancion numero = Utilitario.listaCanciones.get(i);
            fila[0] = numero.getNumero();
        }
        
        if (i < Utilitario.listaCanciones.size()) {
            Cancion numero = Utilitario.listaCanciones.get(i);
            fila[1] = numero.getTitulo();
        }
        
        if (i < Utilitario.listaCanciones.size()) {
            Cancion duracion = Utilitario.listaCanciones.get(i);
            fila[2] = String.format("%d:%02d", duracion.getMinutos(), duracion.getSegundos());
        }
        
        
        
        if (i < Utilitario.listaArtistas.size()) {
            Artista artista = Utilitario.listaArtistas.get(i);
            fila[3] = artista.getNombre();
        }

        // Agrega el nombre del álbum si hay más álbumes disponibles
        if (i < Utilitario.listaAlbum.size()) {
            Album album = Utilitario.listaAlbum.get(i);
            fila[4] = album.getNombre();
        }
        
         if (i < Utilitario.listaGeneros.size()) {
            Genero genero = Utilitario.listaGeneros.get(i);
            fila[5] = genero.getNomGenero();
        }
        

        // Agrega la fila al modelo de la tabla
        modeloTabla.addRow(fila);
    }

    // Configura el modelo de la tabla
     jTableBusqueda.setModel(modeloTabla);
        
         
/////////////////////////LLenar combobox//////////////////////////////////////////////
    for (Artista artista : Utilitario.listaArtistas) {
        cmbArtistas.addItem(artista.getNombre());

        // Agregar los géneros al ComboBox cmbGenero
        for (String genero : artista.getGeneros()) {
            cmbGenero.addItem(genero);
        }

        // Utilizar Utilitario.listaAlbum para llenar cmbAlbum
        for (Album album : Utilitario.listaAlbum) {
            cmbAlbum.addItem(album.getNombre());
        }
    }

         
    
    
    // Agregar ActionListener al cmbArtistas
    cmbArtistas.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbArtistasActionPerformed(evt);
        }
    });

    // Agregar ActionListener al cmbAlbum
    cmbAlbum.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbAlbumActionPerformed(evt);
        }
    });

    // Agregar ActionListener al cmbGenero
    cmbGenero.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbGeneroActionPerformed(evt);
        }
    });
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        utilitario1 = new Logica.Utilitario();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        cmbArtistas = new javax.swing.JComboBox<>();
        cmbAlbum = new javax.swing.JComboBox<>();
        cmbGenero = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBusqueda = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        cmbArtistas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Artistas" }));
        cmbArtistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbArtistasActionPerformed(evt);
            }
        });

        cmbAlbum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Album" }));
        cmbAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlbumActionPerformed(evt);
            }
        });

        cmbGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genero" }));
        cmbGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGeneroActionPerformed(evt);
            }
        });

        jLabel1.setText("Mantenimiento Canciones");

        jTableBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Numero", "Canción", "Artista", "Duración"
            }
        ));
        jScrollPane1.setViewportView(jTableBusqueda);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cmbArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(cmbAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(262, 262, 262))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbArtistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbArtistasActionPerformed
              
     // Obtener el nombre del artista seleccionado del combo
    String nombreArtistaSeleccionado = (String) cmbArtistas.getSelectedItem();

    // Filtrar la tabla para mostrar solo las filas relacionadas con el artista seleccionado
    filtrarTablaPorArtista(nombreArtistaSeleccionado);
}

    
    private void filtrarTablaPorArtista(String nombreArtista) {
    
        DefaultTableModel modeloTabla = (DefaultTableModel) jTableBusqueda.getModel();
       TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
       jTableBusqueda.setRowSorter(sorter);

       RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter(nombreArtista, 3); // 3 es el índice de la columna del artista
       sorter.setRowFilter(rowFilter);
    }//GEN-LAST:event_cmbArtistasActionPerformed

    private void cmbGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGeneroActionPerformed
        // Obtener el género seleccionado del combo
    String Genero = (String) cmbGenero.getSelectedItem();

    // Filtrar la tabla para mostrar solo las filas relacionadas con el género seleccionado
    filtrarTablaPorGenero(Genero );
}

    private void filtrarTablaPorGenero(String nombreGenero) {
         DefaultTableModel modeloTabla = (DefaultTableModel) jTableBusqueda.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        jTableBusqueda.setRowSorter(sorter);

        RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter(nombreGenero, 5); // 5 es el índice de la columna del género
        sorter.setRowFilter(rowFilter);

    }//GEN-LAST:event_cmbGeneroActionPerformed

    private void cmbAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlbumActionPerformed
     
    // Obtener el álbum seleccionado del combo
    String album = (String) cmbAlbum.getSelectedItem();

    // Filtrar la tabla para mostrar solo las filas relacionadas con el álbum seleccionado
    filtrarTablaPorAlbum(album);
    
    }//GEN-LAST:event_cmbAlbumActionPerformed

    private void filtrarTablaPorAlbum(String Album) {
      DefaultTableModel modeloTabla = (DefaultTableModel) jTableBusqueda.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
    jTableBusqueda.setRowSorter(sorter);

    RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter(Album, 4); // 4 es el índice de la columna del álbum
    sorter.setRowFilter(rowFilter);
}
    
   
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmFiltros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmFiltros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmFiltros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmFiltros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmCancion dialog = new frmCancion((frmPrincipal) new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbAlbum;
    private javax.swing.JComboBox<String> cmbArtistas;
    private javax.swing.JComboBox<String> cmbGenero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableBusqueda;
    private Logica.Utilitario utilitario1;
    // End of variables declaration//GEN-END:variables



}
